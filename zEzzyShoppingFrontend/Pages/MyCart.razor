@page "/mycart"
@inject HttpClient httpClient
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime

<div class="container shadow w-50 p-3">
    <div class="row">
        <div class="">
            <h3>My Cart</h3>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }

            <!-- Add a button to trigger the cart retrieval -->
            <button class="btn btn-primary m-3" @onclick="GetCartItems">Get My Cart</button>

            @if (cartItems != null && cartItems.Any())
            {
                <!-- Display cart items here -->
                <ul>
                    @foreach (var item in cartItems)
                    {
                        <li>@item.Name - @item.Price</li>
                    }
                </ul>
            }
            else
            {
                <p>No items in the cart.</p>
            }
        </div>
    </div>
</div>

@code {
    private string errorMessage;
    private List<CartItem> cartItems;

    private async Task GetCartItems()
    {
        try
        {
            // Retrieve userId from localStorage
            var userId = await jsRuntime.InvokeAsync<string>("localStorage.getItem", "userId");

            if (string.IsNullOrEmpty(userId))
            {
                errorMessage = "User is not logged in. Please log in to view your cart.";
                return;
            }

            var apiEndpoint = $"https://localhost:7009/api/Cart/user{userId}";
            var response = await httpClient.GetAsync(apiEndpoint);

            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<ResponseDto>();

                if (result != null && result.IsSuccess)
                {
                    // Assuming your cart items are in the Result property of the ResponseDto
                    cartItems = result.Result;
                }
                else
                {
                    errorMessage = result.ErrorMessage;
                }
            }
            else
            {
                errorMessage = "Failed to retrieve cart items. Please try again.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    // Your CartItem class, adjust as needed
    private class CartItem
    {
        public string Name { get; set; }
        public decimal Price { get; set; }
        // Add other properties as needed
    }

    // Your ResponseDto class, adjust as needed
    private class ResponseDto
    {
        public string ErrorMessage { get; set; }
        public bool IsSuccess { get; set; }
        public List<CartItem> Result { get; set; }
    }
}
