@inject IJSRuntime _jsRuntime;

<div class="card shadow col-4 p-4 m-2" style="width: 18rem;">
    <img src="@product.Image" class="card-img-top" alt="@product.Name">
    <div class="card-body">
        <h5 class="card-title">@product.Name</h5>

        <div class="d-flex justify-content-between">
            <span>
                @product.Description
            </span>
            <span>
               Ksh @product.Price
            </span>

        </div>
        <div class="d-flex justify-content-around mt-4">
            <button class="btn btn-primary" @onclick="editProduct">Edit</button>
            <button class="btn btn-danger" @onclick="removeProduct">Delete</button>
        </div>
    </div>
</div>


@code {

    [Parameter]

    public Product product { get; set; } = default!; //in future a memory will be passed

    [Parameter]
    public EventCallback<Product> OnRemoveProduct { get; set; } //communicates with parent to add newly added memory to list

    public async Task removeProduct()
    {
        await OnRemoveProduct.InvokeAsync(product);
        await _jsRuntime.InvokeVoidAsync("ShowMessage", "error", "Product Deleted Successfully");
    }
    [Parameter]
    public EventCallback<Product> OnEditProduct { get; set; } //communicates with parent to add newly added memory to list

    public async Task editProduct()
    {
        await OnEditProduct.InvokeAsync(product);
        await _jsRuntime.InvokeVoidAsync("ShowMessage", "edit", "Product selected for editing");
    }
}
